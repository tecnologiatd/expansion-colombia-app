This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
ticket/
  [id].tsx
_layout.tsx
scan.tsx

================================================================
Files
================================================================

================
File: ticket/[id].tsx
================
import React, { useEffect, useState } from "react";
import { View, Text, ActivityIndicator, ScrollView } from "react-native";
import { useLocalSearchParams } from "expo-router";
import { useTicketValidation } from "@/presentation/hooks/useTicketValidation";
import { SafeAreaView } from "react-native-safe-area-context";
import { useOrderDetails } from "@/presentation/hooks/useOrders";

export default function TicketDetailsScreen() {
  const { id } = useLocalSearchParams();
  const [qrCode, setQrCode] = useState<string>(id as string);
  const [autoDetectedEventId, setAutoDetectedEventId] = useState<
    string | undefined
  >();

  // Extract eventId from the QR code if available
  useEffect(() => {
    if (typeof qrCode === "string" && qrCode.includes("/")) {
      const parts = qrCode.split("/");
      if (parts.length === 2) {
        setAutoDetectedEventId(parts[1]);
        console.log("Auto-detected eventId from QR:", parts[1]);
      }
    }
  }, [qrCode]);

  // Use provided eventId or extracted one
  const providedEventId = useLocalSearchParams().eventId as string | undefined;
  const eventId = providedEventId || autoDetectedEventId;

  const { ticketStatusQuery } = useTicketValidation(qrCode, eventId);

  const { data: orderData } = ticketStatusQuery.data?.orderId
    ? useOrderDetails(ticketStatusQuery.data?.orderId)
    : { data: null };

  if (ticketStatusQuery.isLoading) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <ActivityIndicator size="large" color="#7B3DFF" />
      </View>
    );
  }

  if (ticketStatusQuery.error) {
    return (
      <View
        style={{
          flex: 1,
          justifyContent: "center",
          alignItems: "center",
          padding: 20,
        }}
      >
        <Text style={{ color: "white", textAlign: "center" }}>
          Error al cargar los detalles del ticket
        </Text>
        <Text style={{ color: "gray", marginTop: 10, textAlign: "center" }}>
          {autoDetectedEventId
            ? `Usando eventId detectado: ${autoDetectedEventId}`
            : "No se detectó eventId en el código QR"}
        </Text>
      </View>
    );
  }

  const ticket = ticketStatusQuery.data;
  const isFullyUsed = ticket.usageCount >= ticket.maxUsages;

  return (
    <SafeAreaView className="flex-1 bg-gray-900">
      <ScrollView className="p-4">
        {autoDetectedEventId && (
          <View className="bg-purple-500/20 rounded-lg p-2 mb-4">
            <Text className="text-purple-300">
              Evento ID detectado en QR: {autoDetectedEventId}
            </Text>
          </View>
        )}

        <View className="bg-gray-800 rounded-lg p-4 mb-4">
          <Text className="text-white text-lg font-bold mb-2">
            Estado del Ticket
          </Text>
          <View
            className={`p-2 rounded ${isFullyUsed ? "bg-red-500/20" : "bg-green-500/20"}`}
          >
            <Text className={isFullyUsed ? "text-red-500" : "text-green-500"}>
              {isFullyUsed ? "Completamente Usadao" : "Válido"}
            </Text>
          </View>

          <View className="mt-3">
            <Text className="text-gray-400">
              Usos: {ticket.usageCount} de {ticket.maxUsages}
            </Text>
            <Text className="text-gray-400">
              Usos restantes: {ticket.remainingUsages}
            </Text>
            <Text className="text-gray-400 mt-2">
              Evento ID: {ticket.eventId}
            </Text>
          </View>

          {ticket.usageHistory && ticket.usageHistory.length > 0 && (
            <View className="mt-4">
              <Text className="text-white text-lg font-bold mb-2">
                Historial de Usos
              </Text>
              {ticket.usageHistory.map((usage, index) => (
                <View key={index} className="bg-gray-700 p-2 rounded mt-2">
                  <Text className="text-gray-300">
                    Uso #{index + 1}:{" "}
                    {new Date(usage.timestamp).toLocaleString()}
                  </Text>
                  <Text className="text-gray-400">
                    Validado por: {usage.validatedBy}
                  </Text>
                </View>
              ))}
            </View>
          )}
        </View>

        {orderData && (
          <View className="bg-gray-800 rounded-lg p-4">
            <Text className="text-white text-lg font-bold mb-4">
              Detalles de la Orden
            </Text>
            <Text className="text-gray-400">
              Cliente: {orderData.billing.first_name}{" "}
              {orderData.billing.last_name}
            </Text>
            <Text className="text-gray-400">
              Email: {orderData.billing.email}
            </Text>
            <Text className="text-gray-400">
              Teléfono: {orderData.billing.phone}
            </Text>
            <Text className="text-white text-lg font-bold mt-4 mb-2">
              Eventos
            </Text>
            {orderData.line_items.map((item) => (
              <View
                key={item.id}
                className="border-t border-gray-700 pt-2 mt-2"
              >
                <Text className="text-white">{item.name}</Text>
                <Text className="text-gray-400">Cantidad: {item.quantity}</Text>
              </View>
            ))}
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

================
File: _layout.tsx
================
import { Stack } from "expo-router";
import { AdminGuard } from "@/presentation/auth/components/AdminGuard";

export default function AdminLayout() {
  return (
    <AdminGuard>
      <Stack>
        <Stack.Screen
          name="scan"
          options={{
            title: "Escanear Ticket",
            headerStyle: {
              backgroundColor: "#111111",
            },
            headerTintColor: "#fff",
          }}
        />
        <Stack.Screen
          name="ticket/[id]"
          options={{
            title: "Detalles del Ticket",
            headerStyle: {
              backgroundColor: "#111111",
            },
            headerTintColor: "#fff",
          }}
        />
      </Stack>
    </AdminGuard>
  );
}

================
File: scan.tsx
================
import React, { useState, useEffect } from "react";
import {
  Text,
  View,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from "react-native";
import { BarCodeScanner } from "expo-barcode-scanner";
import { router } from "expo-router";
import { SafeAreaView } from "react-native-safe-area-context";
import { useTicketValidation } from "@/presentation/hooks/useTicketValidation";
import { Ionicons } from "@expo/vector-icons";

export default function ScanScreen() {
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [scanned, setScanned] = useState(false);
  const [qrData, setQrData] = useState<{
    code: string | null;
    eventId: string | null;
  }>({ code: null, eventId: null });

  // Check camera permissions on mount
  useEffect(() => {
    (async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === "granted");
    })();
  }, []);

  // Setup validation hooks with proper dependencies
  const { ticketStatusQuery, validateTicketMutation, orderDetailsQuery } =
    useTicketValidation(qrData.code || undefined, qrData.eventId || undefined);

  // Handle scanned QR code
  const handleBarCodeScanned = ({ data }: { type: string; data: string }) => {
    if (scanned) return;

    setScanned(true);

    // Parse QR code to extract eventId if present (format: hash/eventId)
    const parts = data.includes("/") ? data.split("/") : [data];
    const eventId = parts.length === 2 ? parts[1] : null;

    console.log("QR scanned:", data, "Detected eventId:", eventId);

    setQrData({
      code: data,
      eventId,
    });
  };

  // Reset the scanner state
  const resetScan = () => {
    setScanned(false);
    setQrData({ code: null, eventId: null });
  };

  // Process ticket validation when data is available
  useEffect(() => {
    if (!ticketStatusQuery.data || !qrData.code) return;

    const ticket = ticketStatusQuery.data;

    // Handle multiple events case
    if (ticket.events?.length > 1 && !qrData.eventId) {
      Alert.alert(
        "Seleccionar Evento",
        "Este ticket es válido para múltiples eventos. Seleccione uno:",
        [
          ...ticket.events.map((event) => ({
            text: `${event.name} (${event.quantity} entradas)`,
            onPress: () =>
              setQrData((prev) => ({ ...prev, eventId: event.id })),
          })),
          { text: "Cancelar", style: "cancel", onPress: resetScan },
        ],
      );
      return;
    }

    // Handle used ticket case
    if (ticket.isUsed) {
      Alert.alert(
        "Ticket Usado",
        `Este ticket ya fue utilizado el ${new Date(
          ticket.usedAt!,
        ).toLocaleString()} por ${ticket.validatedBy}`,
        [
          {
            text: "Ver detalles",
            onPress: () => router.push(`/admin/ticket/${qrData.code}`),
          },
          { text: "Escanear otro", onPress: resetScan },
        ],
      );
      return;
    }

    // Wait for order data before showing validation prompt
    if (orderDetailsQuery.data) {
      showValidationPrompt(ticket, orderDetailsQuery.data);
    }
  }, [ticketStatusQuery.data, orderDetailsQuery.data, qrData]);

  // Show validation confirmation dialog
  const showValidationPrompt = (ticket, orderData) => {
    const eventName =
      ticket.events?.find((e) => e.id === qrData.eventId)?.name ||
      "Desconocido";

    Alert.alert(
      "Validar Ticket",
      `¿Deseas validar el ticket para?\n\n` +
        `Cliente: ${orderData.billing.first_name} ${orderData.billing.last_name}\n` +
        `Email: ${orderData.billing.email}\n` +
        `Teléfono: ${orderData.billing.phone}\n\n` +
        `Evento: ${eventName}\n` +
        `Usos restantes: ${ticket.maxUsages - ticket.usageCount}`,
      [
        { text: "Cancelar", style: "cancel", onPress: resetScan },
        {
          text: "Ver Detalles",
          onPress: () => router.push(`/admin/ticket/${qrData.code}`),
        },
        {
          text: "Validar",
          style: "default",
          onPress: async () => {
            try {
              await validateTicketMutation.mutateAsync({
                qrCode: qrData.code!,
                eventId: qrData.eventId!,
              });

              Alert.alert("Éxito", "Ticket validado correctamente", [
                {
                  text: "Ver detalles",
                  // onPress: () => router.push(`/admin/ticket/${qrData.code}`),
                },
                { text: "Escanear otro", onPress: resetScan },
              ]);
            } catch (error) {
              console.error("Validation error:", error);
              Alert.alert(
                "Error",
                "Error al validar el ticket. Intente nuevamente.",
                [{ text: "OK", onPress: resetScan }],
              );
            }
          },
        },
      ],
    );
  };

  // Handle permission states
  if (hasPermission === null) {
    return (
      <View className="flex-1 justify-center items-center bg-gray-900">
        <Text className="text-white">Solicitando permiso de cámara...</Text>
      </View>
    );
  }

  if (hasPermission === false) {
    return (
      <View className="flex-1 justify-center items-center bg-gray-900 p-4">
        <Text className="text-white text-center mb-4">
          Necesitamos acceso a la cámara para escanear los tickets
        </Text>
        <TouchableOpacity
          className="bg-purple-500 px-6 py-3 rounded-lg"
          onPress={() => BarCodeScanner.requestPermissionsAsync()}
        >
          <Text className="text-white font-bold">Dar Permiso</Text>
        </TouchableOpacity>
      </View>
    );
  }

  // Main scanner UI
  return (
    <SafeAreaView className="flex-1 bg-gray-900">
      <View className="flex-1 m-4 rounded-2xl overflow-hidden">
        <BarCodeScanner
          onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
          barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}
          style={{ flex: 1 }}
        >
          <View className="flex-1 bg-transparent justify-center items-center">
            <View className="w-72 h-72 border-2 border-white/50 rounded-2xl">
              <View className="absolute -top-2 -left-2 w-4 h-4 border-t-2 border-l-2 border-purple-500" />
              <View className="absolute -top-2 -right-2 w-4 h-4 border-t-2 border-r-2 border-purple-500" />
              <View className="absolute -bottom-2 -left-2 w-4 h-4 border-b-2 border-l-2 border-purple-500" />
              <View className="absolute -bottom-2 -right-2 w-4 h-4 border-b-2 border-r-2 border-purple-500" />
            </View>
          </View>
        </BarCodeScanner>
      </View>

      <View className="p-4">
        <View className="bg-gray-800 rounded-lg p-4 mb-4">
          {/* Status indicators */}
          {scanned &&
            (qrData.code ||
              ticketStatusQuery.isLoading ||
              orderDetailsQuery.isLoading) && (
              <View className="flex-row items-center justify-center mb-3">
                <ActivityIndicator
                  size="small"
                  color="#7B3DFF"
                  animating={
                    ticketStatusQuery.isLoading || orderDetailsQuery.isLoading
                  }
                />
                <Text className="text-white ml-2">
                  {ticketStatusQuery.isLoading
                    ? "Verificando ticket..."
                    : orderDetailsQuery.isLoading
                      ? "Cargando detalles de la orden..."
                      : qrData.eventId
                        ? `QR procesado: ${qrData.code}`
                        : "Procesando QR..."}
                </Text>
              </View>
            )}

          {/* Error display */}
          {(ticketStatusQuery.error || orderDetailsQuery.error) && (
            <View className="mb-3 p-2 bg-red-500/20 rounded">
              <Text className="text-red-400 text-center">
                Error al procesar el ticket. Intente nuevamente.
              </Text>
            </View>
          )}

          {/* Instructions */}
          <Text className="text-white text-center text-lg mb-3">
            {scanned
              ? "Procesando información del ticket..."
              : "Coloca el código QR dentro del marco"}
          </Text>

          {/* Reset button */}
          {scanned && (
            <TouchableOpacity
              className="bg-purple-500 py-3 rounded-lg flex-row justify-center items-center"
              onPress={resetScan}
            >
              <Ionicons name="scan" size={24} color="white" />
              <Text className="text-white font-bold ml-2">
                Escanear otro ticket
              </Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    </SafeAreaView>
  );
}



================================================================
End of Codebase
================================================================
